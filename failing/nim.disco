import list

||| Convert a natural number into a list of bits, with the *least*
||| significant bit first.

!!! toBinary 0 == ([] : List Z2)
!!! toBinary 1 == ([1] : List Z2)
!!! toBinary 2 == ([0,1] : List Z2)
!!! toBinary 534 == ([0,1,1,0,1,0,0,0,0,1] : List Z2)
toBinary : N -> List Z2
toBinary 0 = []
toBinary n =
  {? 0 :: toBinary (n // 2)   if 2 divides n
  ,  1 :: toBinary (n // 2)   otherwise
  ?}

||| Convert a list of bits (with the least significant bit first) back
||| into a natural number.  Left inverse of toBinary.

!!! fromBinary [0,0,1,1] == 12
!!! fromBinary [0,0,0,0] == 0
!!! âˆ€ n : N. fromBinary (toBinary n) == n

fromBinary : List Z2 -> N
fromBinary []       = 0
fromBinary (0 :: b) = 2 * fromBinary b
fromBinary (1 :: b) = 1 + 2 * fromBinary b

xor : List Z2 -> List Z2 -> List Z2
xor [] bs = bs
xor bs [] = bs
xor (a::as) (b::bs) = a + b :: xor as bs

xorN : N -> N -> N
xorN a b = fromBinary (xor (toBinary a) (toBinary b))

nimSum : List N -> N
nimSum ns = fromBinary (reduce xor [] (map toBinary ns))

xorPile : N -> List N -> List N
xorPile _ [] = []
xorPile x (n :: ns)
  = {? xorN x n :: ns     if xorN x n < n
    ,  n :: xorPile x ns  otherwise
    ?}

||| Perform the optimal nim move, or report that the position is a
||| losing position.

!!! nimMove [1,5,8] == (right [1,5,4] : Unit + List N)
nimMove : List N -> Unit + List N
nimMove ls =
  let s   = nimSum ls
    , ls' = xorPile s ls
  in  {? left ()   if ls == ls'
      ,  right ls' otherwise
      ?}
