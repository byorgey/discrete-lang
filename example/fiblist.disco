take : N -> List N -> List N
take 0 _ = []
take _ [] = []
take (n+1) (x::xs) = x :: take n xs

zipWith : (N -> N -> N) -> List N -> List N -> List N
zipWith _ [] _ = []
zipWith _ _ [] = []
zipWith f (a::as) (b::bs) = f a b :: zipWith f as bs

tail : List N -> List N
tail (_::xs) = xs

fibs : List N
fibs = 0 :: 1 :: zipWith (\x, y. x + y) fibs (tail fibs)
